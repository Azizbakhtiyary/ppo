import asyncio
import json
import websockets
import pandas as pd
from datetime import datetime

BINANCE_WS_URL = "wss://fstream.binance.com/ws"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
order_book_df = pd.DataFrame(columns=["timestamp", "bid_price", "bid_size", "ask_price", "ask_size"])
tick_trades_df = pd.DataFrame(columns=["timestamp", "price", "volume", "side"])


async def listen_order_book(symbol="btcusdt"):
    """ –ü–æ–ª—É—á–∞–µ–º DOM (Depth of Market) –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ DataFrame """
    global order_book_df
    stream_name = f"{symbol}@depth5@100ms"  # 5 —É—Ä–æ–≤–Ω–µ–π –∫–Ω–∏–≥–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–∞–∂–¥—ã–µ 100 –º—Å
    url = f"{BINANCE_WS_URL}/{stream_name}"
    
    async with websockets.connect(url) as ws:
        while True:
            response = await ws.recv()
            data = json.loads(response)
            
            bids = data["b"][:5]  # –¢–û–ü-5 –∑–∞—è–≤–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
            asks = data["a"][:5]  # –¢–û–ü-5 –∑–∞—è–≤–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
            timestamp = datetime.now()

            # –ë–µ—Ä–µ–º –ª—É—á—à–∏–π –±–∏–¥ –∏ –ª—É—á—à–∏–π –∞—Å–∫
            best_bid_price, best_bid_size = bids[0]
            best_ask_price, best_ask_size = asks[0]

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ DataFrame
            new_row = pd.DataFrame([[timestamp, best_bid_price, best_bid_size, best_ask_price, best_ask_size]],
                                   columns=order_book_df.columns)
            order_book_df = pd.concat([order_book_df, new_row], ignore_index=True).dropna(axis=1, how='all')

            if len(order_book_df) % 30 == 0:  # –í—ã–≤–æ–¥ –∫–∞–∂–¥—ã–µ 10 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                print(f"üî• DOM Update: Bid {best_bid_price} / Ask {best_ask_price}")


async def listen_tick_volume(symbol="btcusdt"):
    """ –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫-—Å–¥–µ–ª–∫–∏ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ DataFrame """
    global tick_trades_df
    stream_name = f"{symbol}@trade"  
    url = f"{BINANCE_WS_URL}/{stream_name}"

    async with websockets.connect(url) as ws:
        while True:
            response = await ws.recv()
            trade = json.loads(response)

            price = trade["p"]
            volume = trade["q"]
            side = "BUY" if trade["m"] == False else "SELL"  # m=False ‚Üí –ø–æ–∫—É–ø–∫–∞, m=True ‚Üí –ø—Ä–æ–¥–∞–∂–∞
            timestamp = datetime.now()

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ DataFrame
            new_row = pd.DataFrame([[timestamp, price, volume, side]],
                                   columns=tick_trades_df.columns)
            tick_trades_df = pd.concat([tick_trades_df, new_row], ignore_index=True).dropna(axis=1, how='all')

            if len(tick_trades_df) % 15 == 0:  # –í—ã–≤–æ–¥ –∫–∞–∂–¥—ã–µ 5 —Ç–∏–∫-—Ç—Ä–µ–π–¥–æ–≤
                print(f"‚ö° Trade: {side} {volume} BTC at {price}")


async def main():
    """ –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket-—Å–µ—Å—Å–∏–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ """
    await asyncio.gather(
        listen_order_book(),
        listen_tick_volume(),
        save_and_print_data()  # –í—ã–≤–µ–¥–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫
    )

import time

async def save_and_print_data():
    """–ñ–¥—ë–º 10 —Å–µ–∫—É–Ω–¥, –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ DataFrame"""
    await asyncio.sleep(10)  # –î–∞–µ–º –≤—Ä–µ–º—è —Å–æ–±—Ä–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º

    print("\nüî• –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π DOM:")
    print(order_book_df.tail())  # –í—ã–≤–µ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫ DOM

    print("\n‚ö° –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π —Ç–∏–∫-—Å–¥–µ–ª–æ–∫:")
    print(tick_trades_df.tail())  # –í—ã–≤–µ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫ —Ç–∏–∫-—Å–¥–µ–ª–æ–∫



if __name__ == "__main__":
    asyncio.run(main())

# –í—ã–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π DOM
print("\nüî• –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π DOM:")
print(order_book_df.tail())

# –í—ã–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π —Ç–∏–∫-—Å–¥–µ–ª–æ–∫
print("\n‚ö° –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π —Ç–∏–∫-—Å–¥–µ–ª–æ–∫:")
print(tick_trades_df.tail())

